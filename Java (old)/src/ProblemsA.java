public class ProblemsA {
	//problem #1
	//If we list all the natural numbers below 10 that are multiples of 3 or 5, 
	//we get 3, 5, 6 and 9. The sum of these multiples is 23.
	//Find the sum of all the multiples of 3 or 5 below 1000.
	public static void problem1(){
		int count = 0;
		for(int i = 1; i < 1000; i++){
			if(i % 3 == 0 || i % 5 == 0){
				count += i;
				System.out.println("After adding " + i + " we get " + count);
			}
		}
		System.out.println("Final answer: " + count);
	}

	//Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	//By starting with 1 and 2, the first 10 terms will be:
	//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	//By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
	//find the sum of the even-valued terms.
	public static void problem2(){
		int i = 1, j = 2;
		int count = 0;
		while(j < 4000000){
			if(j % 2 == 0){
				count += j;
				System.out.println("After adding " + j + " we get " + count);
			}
			int temp = i+j;
			i = j;
			j = temp;
		}
		System.out.println("Final answer: " + count);
	}

	//The prime factors of 13195 are 5, 7, 13 and 29.
	//What is the largest prime factor of the number 600851475143 ?
	public static void problem3(){
		double n = (double)600851*(double)1000000 + (double)475143;

		for(int i = 2; i < Math.sqrt(n); i++){
			if(n % i == 0){
				System.out.println("" + n + " is divisible by " + i);
				n /= i;
				i--;
			}
		}
		System.out.println("Largest prime: " + n);
	}

	//A palindromic number reads the same both ways. The largest palindrome made 
	//from the product of two 2-digit numbers is 9009 = 91 × 99.
	//Find the largest palindrome made from the product of two 3-digit numbers.
	public static void problem4(){
		int largest = 0;
		for(int i = 999; i > 100; i--){
			for(int j = 999; j > i; j--){
				int k = i*j;
				if(k < largest)
					break;
				if(Helpers.isPalindrome(""+k)){
					largest = k;
					System.out.println("Current Best: " + i + " * " + j + " = " + largest);
				}
			}
		}
		System.out.println("Final Answer: " + largest);
	}
	
	//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
	//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	public static void problem5(){
		// Done using calculator
		// 2 2 2 2 3 3 5 7 11 13 17 19
		System.out.println(232792560);
	}
	
	//The sum of the squares of the first ten natural numbers is 385
	//The square of the sum of the first ten natural numbers is 3025
	//Hence the difference between the sum of the squares of the first ten natural numbers and the square 
	//of the sum is 3025 - 385 = 2640.
	//Find the difference between the sum of the squares of the first one hundred natural numbers 
	//and the square of the sum.
	public static void problem6(){
		int sumOfSquares = 0;
		for(int i = 1; i <= 100; i++){
			sumOfSquares += i*i;
		}
		
		int sum = 0;
		for(int i = 1; i <= 100; i++){
			sum += i;
		}
		System.out.println("Sum is " + sum);
		System.out.println("Square of sums is " + (sum*sum));
		System.out.println("Sum of Squares is " + sumOfSquares);
		System.out.println("Difference " + (sum*sum - sumOfSquares));
	}
	
	//By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
	//What is the 10001st prime number?
	public static void problem7(){
		int i = 1;
		int count = 0;
		while(count < 10001){
			i++;
			boolean prime = true;
			for(int j = 2; j <= Math.sqrt(i); j++){
				if(i % j == 0){
					prime = false;
					break;
				}
			}
			if(prime){
				count++;
				System.out.println("Prime #" + count + ": " + i);
			}
		}
	}
	
	//Find the greatest product of five consecutive digits in the 1000-digit number.
	public static void problem8(){
		String s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
		int [] a = new int[1000];
		for(int i = 0; i < s.length(); i++){
			a[i] = s.charAt(i) - '0';
		}
		int largest = 0;
		for(int i = 0; i < a.length-4; i++){
			int n = a[i]*a[i+1]*a[i+2]*a[i+3]*a[i+4];
			if(largest < n){
				System.out.println(a[i]+" "+a[i+1]+" "+a[i+2]+" "+a[i+3]+" "+a[i+4]+" got " + n);
				largest = n;
			}
		}
		System.out.println("Final answer: " + largest);
	}
	
	//A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
	//a^2 + b^2 = c^2
	//For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
	//There exists exactly one Pythagorean triplet for which a + b + c = 1000.
	//Find the product abc.
	public static void problem9(){
		for(int a = 1; a < 1000; a++){
			for(int b = a+1; b < 1000; b++){
				for(int c = b+1; c < 1000; c++){
					if(a + b + c == 1000)
						if(a*a + b*b == c*c){
							System.out.println(a + " " + b + " " + c + " " + a*b*c);
							return;
						}
				}
			}
		}
	}
	
	//The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
	//Find the sum of all the primes below two million.
	public static void problem10(){
		double sum = 2;
		for(int i = 3; i < 2000000; i+=2){
			boolean b = true;
			for(int j = 3; j <= Math.sqrt(i); j+=2){
				if(i % j == 0){
					b = false;
					break;
				}
			}
			if(b){
				sum += i;
				//System.out.println("Sum " + sum + " after adding " + i);
			}
		}
		System.out.println("Final answer: " + sum); //142913828922
	}
}
