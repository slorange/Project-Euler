/*Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers 
 * and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number 
    (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented 
    by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, 
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

public class Problem61 {
	public static boolean grid[][] = new boolean[10000][6];
	public static void main(String[] args) {
		
		int n = 0, p = 0;//Triangle
		while((p = n*(n+1)/2) < 10000){
			grid[p][0] = true;
			n++;
		}
		n = 0; p = 0;//Square
		while((p = n*n) < 10000){
			grid[p][1] = true;
			n++;
		}
		n = 0; p = 0;//Pentagonal
		while((p = n*(3*n-1)/2) < 10000){
			grid[p][2] = true;
			n++;
		}
		n = 0; p = 0;//Hexagonal
		while((p = n*(2*n-1)) < 10000){
			grid[p][3] = true;
			n++;
		}
		n = 0; p = 0;//Heptagonal
		while((p = n*(5*n-3)/2) < 10000){
			grid[p][4] = true;
			n++;
		}
		n = 0; p = 0;//Octogonal
		while((p = n*(3*n-2)) < 10000){
			grid[p][5] = true;
			n++;
		}
		
		for(int i = 1000; i < 10000; i++){
			Go(i, i, 1, new boolean[]{false, false, false, false, false, false}, "", i);
		}
	}
	
	//(2)2882 (0)8256 (1)5625 (4)2512 (5)1281 (3)8128  Sum: 28684
	public static void Go(int starter, int n, int depth, boolean[] b, String path, int sum){
		for(int i = 0; i < 6; i++){
			if(!b[i] && grid[n][i]){
				b[i] = true;
				String newpath = path + " (" + i + ")" + n;
				if(depth == 6){
					if(starter/100 == n%100){
						System.out.println(newpath + "  Sum: " + sum);
					}
				}
				else{
					for(int j = 0; j < 100; j++){
						int n2 = (n%100)*100 + j;
						if(n2 > 1000){
							Go(starter, n2, depth+1, b, newpath, sum + n2);
						}
					}
				}
				b[i] = false;
			}
		}
	}
}
