import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;


public class ProblemsB {
	//In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
	//The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
	//What is the greatest product of four adjacent numbers in any direction 
	//(up, down, left, right, or diagonally) in the 20×20 grid?
	public static void problem11(){
		String s = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
		int [][] a = new int[20][20];
		for(int i = 0; i < 400; i++){
			int x = i%20;
			int y = i/20;
			int val = Integer.parseInt(s.substring(i*3,i*3+2));
			a[x][y] = val;
		}
		int max = 0;
		for(int y = 0; y < 17; y++){
			for(int x = 0; x < 20; x++){
				int n = a[x][y] * a[x][y+1] * a[x][y+2] * a[x][y+3];
				if(n > max){
					System.out.println(a[x][y]+"*"+a[x][y+1]+"*"+a[x][y+2]+"*"+a[x][y+3]+"="+n);
					max = n;
				}
			}
		}
		for(int y = 0; y < 20; y++){
			for(int x = 0; x < 17; x++){
				int n = a[x][y] * a[x+1][y] * a[x+2][y] * a[x+3][y];
				if(n > max){
					System.out.println(a[x][y]+"*"+a[x+1][y]+"*"+a[x+2][y]+"*"+a[x+3][y]+"="+n);
					max = n;
				}
			}
		}
		
		for(int y = 0; y < 17; y++){
			for(int x = 0; x < 17; x++){
				int n = a[x][y] * a[x+1][y+1] * a[x+2][y+2] * a[x+3][y+3];
				if(n > max){
					System.out.println(a[x][y]+"*"+a[x+1][y+1]+"*"+a[x+2][y+2]+"*"+a[x+3][y+3]+"="+n);
					max = n;
				}
			}
		}
		
		for(int y = 0; y < 17; y++){
			for(int x = 4; x < 20; x++){
				int n = a[x][y] * a[x-1][y+1] * a[x-2][y+2] * a[x-3][y+3];
				if(n > max){
					System.out.println(a[x][y]+"*"+a[x-1][y+1]+"*"+a[x-2][y+2]+"*"+a[x-3][y+3]+"="+n);
					max = n;
				}
			}
		}
		System.out.println("Final answer: " + max);
	}	
	
	//The sequence of triangle numbers is generated by adding the natural numbers. 
	//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	//Let us list the factors of the first seven triangle numbers:
	//28: 1,2,4,7,14,28
	//We can see that 28 is the first triangle number to have over five divisors.
	//What is the value of the first triangle number to have over five hundred divisors?
	public static void problem12(){
		int n = 0, i = 0;
		int f = 0;
		while(f <= 500){
			i++;
			n += i;
			f = Helpers.numberOfFactors(n);
			//System.out.println(n + " has " + f + " factors");
		}
		System.out.println("Final Answer: " + n);
	}
	
	//Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
	public static void problem13() throws IOException{
		BufferedReader in = new BufferedReader(new FileReader("data/12.in"));
		long[] a = new long[100];
		for(int i = 0; i < 100; i++){
			a[i] = Long.parseLong(in.readLine().substring(0, 16));
		}
		in.close();
		
		long sum = 0;
		for(int i = 0; i < 100; i++){
			sum += a[i];
			System.out.println("Current sum: " + sum/100000000);
		}
		System.out.println("Final answer: " + sum/100000000);
	}
	
	//The following iterative sequence is defined for the set of positive integers:
	//n -> n/2 (n is even)
	//n -> 3n + 1 (n is odd)
	//Using the rule above and starting with 13, we generate the following sequence:
	//13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
	//It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
	//Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
	//Which starting number, under one million, produces the longest chain?
	//NOTE: Once the chain starts the terms are allowed to go above one million.
	public static void problem14(){
		int max = -1;
		int maxScore = 0;
		for(int i = 0; i < 1000000; i++){
			int score = Helpers.Collatz(i);
			//System.out.println(" " + i + " " + score);
			if(score >= maxScore){
				maxScore = score;
				max = i;
				System.out.println("new best: " + max + " " + maxScore);
			}
		}
		System.out.println("Final Answer: " + max + " " + maxScore);
	}
	
	//Starting in the top left corner of a 2×2 grid, there are 6 routes 
	//(without backtracking) to the bottom right corner.
	//How many routes are there through a 20×20 grid?
	public static void problem15(){
		//System.out.println("" + p15helper(0,0));
		int size = 20;
		long[][] a = new long[size+1][size+1];
		for(int i = 0; i < size+1; i++){
			a[i][size] = 1;
			a[size][i] = 1;
		}
		for(int x = size-1; x >= 0; x--){
			for(int y = size-1; y >= 0; y--){
				a[x][y] = a[x][y+1] + a[x+1][y];
			}
		}
		System.out.println(a[0][0]);
	}
	
	//2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
	//What is the sum of the digits of the number 2^1000?
	public static void problem16(){
		BigInteger l = BigInteger.valueOf(2);
		l = l.pow(1000);
		int sum = 0;
		String s = l.toString();
		for(int i = 0; i < s.length(); i++){
			sum += s.charAt(i)-'0';
		}
		System.out.println(sum);
	}
}
